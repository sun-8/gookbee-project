<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- spring HikariCP jdbc -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<property name="jdbcUrl" value="jdbc:oracle:thin:@127.0.0.1:1521:xe"/>
		<property name="username" value="night"/>
		<property name="password" value="night"/>
	</bean>
	
	<!-- HicariCP configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig"/>
	</bean>
	
	<context:component-scan base-package="org.zerock.sample"></context:component-scan>
</beans>

<!-- 
	'root-context.xml'은 스프링 프레임워크에서 관리해야하는 객체(이러한 객체는 스프링에서는 빈[Bean]이라고 표현한다.)를 설정하는 파일이다.
	
	앞서 작성한 Restaurant.java , Chef.java 와 root-context.xml이 어떻게 동작하는지 이해하기 위해서는 스프링과 함께 시간의 순서대로 고민해야한다.
		1. 스프링 프레임워크가 시작되면 먼저 스프링이 사용하는 메모리 영역을 만들게 되는데 이를 컨텍스트(Context)라고 한다. 스프링에서는 ApplicationContext라는 이름의 객체가 만들어진다.
		2. 스프링은 자신이 객체를 생성하고 관리해야 하는 객체들에 대한 설정이 필요하다. 이에 대한 설정이 root-context.xml파일이다.
		3. root-context.xml에 설정되어있는 <context:component-scan>태그의 내용을 통해서 'org.zerock.sample'패키지를 스캔하기 시작한다.
		4. 해당 패키지에 있는 클래스들 중에서 스프링이 사용하는 @Component라는 어노테이션이 존재하는 클래스를 찾아서 그 클래스의 인스턴스를 생성한다.
		5. Restaurant 객체는 Chef 객체가 필요하다는 어노테이션(@Autowired) 설정이 있으므로, 스프링은 Chef 객체의 레퍼런스를 Restaurant 객체에 주입한다.
		4. 위의 순서대로 동작하는지 테스트 하기 위해서 테스트 코드를 작성한다. (src/test/java - org.zerock.sample - SampleTests.java)
 -->
<!-- 
	root-context.xml 안의 설정은 <bean>태그를 정의해서 작성한다. <bean>태그 내에는 <property>를 이용해서 여러 속성에 대해서 설정할 수 있다. 
	스프링에서 root-context.xml은 스프링이 로딩되면서 읽어들이는 문서이므로, 주로 이미 만들어진 클래스들을 이용해서 스프링의 빈(Bean)으로 등록할 때 사용된다.
	일반적인 상황이라면 프로젝트에 직접 작성하는 클래스들은 어노테이션을 이용하는 경우가 많다.
	외부 jar파일 등으로 사용하는 클래스들은 <Bean> 태그를 이용해서 작성하는 경우가 대부분이다.
-->